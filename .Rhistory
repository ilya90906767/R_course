counts<-table(tt$Class)
counts
barplot(counts, col=c('red', 'blue', 'green'), cex.names = 2, cex.main =2,
main = 'Распределение классов')
counts<-table(tt$Class,tt$Dose.category)
counts
counts<-counts[c(2,1,3),c(1,3,2)]
counts
barplot(counts, col=c("red","blue","green"),
cex.names=2, cex.main=2, legend=rownames(counts),
main="Зависимость степени гепатотоксичности от дозы", beside=TRUE)
counts<-table(tt$Class)
pie(counts, labels=names(counts), col=c("red","blue","green"), cex=2)
data<-read.delim('Arthritis.txt')
View(data)
count_imp <- table(data$Improved)
count_imp
barplot(count_imp, col = c('orange','red','pink'),
main = 'Терапевтический эффект',
x.lab = 'Эффект', y.lab = 'Количество пациентов')
barplot(count_imp, col = c('orange','red','pink'),
main = 'Терапевтический эффект',
xlab = 'Эффект', ylab = 'Количество пациентов')
percent<-c(count_imp[,1]/sum(count_imp), count_imp[,2]/sum(count_imp), count_imp[,3]/sum(count_imp))
count_imp[,1]
count_imp[1,]
count_imp
sum(count_imp)
count_imp[,1]
count_imp$Marked/sum(count_imp)
count_imp$Marked/sum(count_imp)
count_imp[,1]
count_imp[1,]
count_imp[1]
percent<-c(count_imp[1]/sum(count_imp), count_imp[2]/sum(count_imp), count_imp[3]/sum(count_imp))
percent<-c(100*count_imp[1]/sum(count_imp), 100*count_imp[2]/sum(count_imp), 100*count_imp[3]/sum(count_imp))
pie<-(percent)
pie(percent)
pie(percent, names(paste(data$Improved,percent,%, sep = ' ' )))
names<-paste(data$Improved,percent,%, sep = ' ' )
names<-paste(data$Improved, percent, %, sep = ' ' )
names<-paste(data$Improved, percent, '%', sep = ' ')
nt, '%', sep = ' ')
pie(percent, labels=names)
names<-paste(data$Improved, round(percent), '%', sep = ' ')
pie(percent, labels=names)
count_imp <- table(data$Improved)
percent<-c(100*count_imp[1]/sum(count_imp), 100*count_imp[2]/sum(count_imp), 100*count_imp[3]/sum(count_imp))
names<-paste(data$Improved, round(percent), '%', sep = ' ')
data$Improved
names<-paste(count_imp, round(percent), '%', sep = ' ')
pie(percent, labels=names)
names<-paste(count_imp$colnames, round(percent), '%', sep = ' ')
names<-paste(count_imp$names, round(percent), '%', sep = ' ')
names<-paste(c('Marked', 'None', 'Some'), round(percent), '%', sep = ' ')
pie(percent, labels=names)
counts <- table(data$Improved, data$Treatment)
counts
counts <- table(data$Improved, data$Treatment)
barplot(counts, col = c('orange','red','pink'),
main = 'Эффект лекарств для лечения артрита',
legend=rownames(counts), besides = T)
counts <- table(data$Improved, data$Treatment)
barplot(counts, col = c('orange','red','pink'),
main = 'Эффект лекарств для лечения артрита',
legend=rownames(counts), beside = T)
counts <- table(data$Improved, data$Treatment)
barplot(counts, col = c('orange','red','pink'),
main = 'Эффект лекарств для лечения артрита',
ylim = c(0, 30),
legend=rownames(counts), beside = T)
data(women)
head(data)
data(women)
women
View(women)
library(car)
install.packages('car')
library(car)
library('car')
install.packages('car')
library('car')
library(car)
qqPlot(women$height, main = 'Q-Q Plot'. ylab = 'Height of women')
qqPlot(women$height, main = 'Q-Q Plot', ylab = 'Height of women')
hist(women$height, main = 'Q-Q Plot', ylab = 'Height of women')
lines(density(women$height), col="red", lwd=2)
hist(women$height, main = 'Q-Q Plot', req=F, ylab = 'Height of women')
lines(density(women$height), col="red", lwd=2)
hist(women$height, main = 'Q-Q Plot', freq=F, ylab = 'Height of women')
lines(density(women$height), col="red", lwd=2)
shapiro.test(women$height)
shapiro_test <- shapiro.test(women$height)
else { cat('Нулевая гипотеза отклоняется, данные распределены НЕнормально. \n')
else {
# Для ленивых
if(shapiro_test$p.value > 0.05) {
cat('Нулевая гипотеза принимается, данные распределены нормально. \n')
} else {
cat('Нулевая гипотеза отклоняется, данные распределены НЕнормально. \n')
}
#Тест Колмогорова-Смирнова
data <- rnorm(50, mean = 0, sd =1)
ks_tst <- ks.test(data, 'pnorm', mean = 0, sd = 1)
View(ks_tst)
ks_tst
ks_tst1 <- ks.test(women$weight, 'pnorm')
View(ks_tst1)
ks_tst1
ks.test(women$height, 'pnorm')
qqPlot(women$weight, main = 'Q-Q Plot', ylab = 'Height of women')
ks_tst1 <- ks.test(women$height, 'pnorm', mean = mean(women$height), sd = sd(women$height))
ks_tst
cor(women, method = 'pearson')
cor.test(women$height, women$weight, method = 'pearson')
#Задание 1
data <- read.delim(“mRNA-protein correlation.txt”)
#Задание 1
data <- read.delim('mRNA-protein correlation.txt')
setwd("C:/BaranovaAS/данные")
#Задание 1
data <- read.delim('mRNA-protein correlation.txt')
#Задание 1
data <- read.delim('mRNA-protein_correlation.txt')
log_data <- log(data)
View(data)
log_data <- c(data[c(1,2),], log(data[c(3,4),])
log_data <- c(data[c(1,2),], log(data[c(3,4),]))
log_data <- data.frame(data[c(1,2),], log(data[c(3,4),]))
log_data <- data.frame(data[c(1,2),], log(data$mRNA.copy.number.experiment..molecules.cell.), log(data$Protein.copy.number.experiment..molecules.cell.))
View(log_data)
log_data <- data.frame(data[,c(1,2)], log(data$mRNA.copy.number.experiment..molecules.cell.), log(data$Protein.copy.number.experiment..molecules.cell.))
View(log_data)
summary<-(log_data$log.data.mRNA.copy.number.experiment..molecules.cell..)
summary(log_data$log.data.mRNA.copy.number.experiment..molecules.cell..)
summary(log_data$log.data.Protein.copy.number.experiment..molecules.cell..)
!is.na(log_data$log.data.mRNA.copy.number.experiment..molecules.cell..)
log_data <- log_data[!is.na(log_data$log.data.mRNA.copy.number.experiment..molecules.cell..),]
summary(log_data$log.data.mRNA.copy.number.experiment..molecules.cell..)
summary(log_data$log.data.Protein.copy.number.experiment..molecules.cell..)
boxplot(log_data$log.data.mRNA.copy.number.experiment..molecules.cell..,
log_data$log.data.Protein.copy.number.experiment..molecules.cell..,
main = 'Логарифм концентрации молекул')
boxplot(log_data$log.data.mRNA.copy.number.experiment..molecules.cell..,
log_data$log.data.Protein.copy.number.experiment..molecules.cell..,
main = 'Логарифм концентрации молекул',
xlab = c('мРНК', 'белки'))
boxplot(log_data$log.data.mRNA.copy.number.experiment..molecules.cell..,
log_data$log.data.Protein.copy.number.experiment..molecules.cell..,
main = 'Логарифм концентрации молекул',
xnames = c('мРНК', 'белки'))
boxplot(log_data$log.data.mRNA.copy.number.experiment..molecules.cell..,
log_data$log.data.Protein.copy.number.experiment..molecules.cell..,
main = 'Логарифм концентрации молекул',
lb = c('мРНК', 'белки'))
lb = c('мРНК', 'белки')
boxplot(log_data$log.data.mRNA.copy.number.experiment..molecules.cell..,
log_data$log.data.Protein.copy.number.experiment..molecules.cell..,
main = 'Логарифм концентрации молекул',
xlab = c'mRNA', 'Proteim')
boxplot(log_data$log.data.mRNA.copy.number.experiment..molecules.cell..,
log_data$log.data.Protein.copy.number.experiment..molecules.cell..,
main = 'Логарифм концентрации молекул',
xlab = c('mRNA', 'Proteim'))
boxplot(log_data$log.data.mRNA.copy.number.experiment..molecules.cell..,
log_data$log.data.Protein.copy.number.experiment..molecules.cell..,
main = 'Логарифм концентрации молекул')
#Задание 2
hep_data <- read.delim('Hepatotoxicity.txt')
View(hep_data)
cor.test(hep_data$Dose.category,hep_data$Class,method="spearmen")
cor.test(hep_data$Dose.category,hep_data$Class,method="spearman")
pr<- par(no.readonly=TRUE) # readonly позволяет записывать все параметры сразу
par(mfrow=c(1,2))
hist(log_data$log.data.mRNA.copy.number.experiment..molecules.cell..,
main = 'Логарифм концентрации mRNA', col = 'lightblue')
hist(log_data$log.data.Protein.copy.number.experiment..molecules.cell..,
main = 'Логарифм концентрации Protein', col = 'lightgray')
par(pr)
pr<- par(no.readonly=TRUE)
par(mfrow=c(2,2))
hist(log_data$log.data.mRNA.copy.number.experiment..molecules.cell..,
main = 'Логарифм концентрации mRNA', col = 'lightblue')
hist(log_data$log.data.Protein.copy.number.experiment..molecules.cell..,
main = 'Логарифм концентрации Protein', col = 'lightgray')
qqPlot(log_data$log.data.mRNA.copy.number.experiment..molecules.cell..,
main = 'Логарифм концентрации mRNA', col = 'lightblue')
qqPlot(log_data$log.data.Protein.copy.number.experiment..molecules.cell..,
main = 'Логарифм концентрации Protein', col = 'lightgray')
par(pr)
shapiro.test(log_data$log.data.mRNA.copy.number.experiment..molecules.cell..)
shapiro.test(log_data$log.data.Protein.copy.number.experiment..molecules.cell..)
pr<- par(no.readonly=TRUE)
par(mfrow=c(2,2))
hist(log_data$log.data.mRNA.copy.number.experiment..molecules.cell..,
main = 'Логарифм концентрации mRNA', col = 'lightblue')
lines(density(log_data$log.data.mRNA.copy.number.experiment..molecules.cell..), col="red", lwd=2)
hist(log_data$log.data.Protein.copy.number.experiment..molecules.cell..,
main = 'Логарифм концентрации Protein', col = 'lightgray')
lines(density(log_data$log.data.Protein.copy.number.experiment..molecules.cell..), col="red", lwd=2)
qqPlot(log_data$log.data.mRNA.copy.number.experiment..molecules.cell..,
main = 'Логарифм концентрации mRNA', col = 'lightblue')
qqPlot(log_data$log.data.Protein.copy.number.experiment..molecules.cell..,
main = 'Логарифм концентрации Protein', col = 'lightgray')
par(pr)
pr<- par(no.readonly=TRUE)
par(mfrow=c(2,2))
hist(log_data$log.data.mRNA.copy.number.experiment..molecules.cell.., freq = F,
main = 'Логарифм концентрации mRNA', col = 'lightblue')
lines(density(log_data$log.data.mRNA.copy.number.experiment..molecules.cell..), col="red", lwd=2)
hist(log_data$log.data.Protein.copy.number.experiment..molecules.cell.., freq = F,
main = 'Логарифм концентрации Protein', col = 'lightgray')
lines(density(log_data$log.data.Protein.copy.number.experiment..molecules.cell..), col="red", lwd=2)
qqPlot(log_data$log.data.mRNA.copy.number.experiment..molecules.cell..,
main = 'Логарифм концентрации mRNA', col = 'lightblue')
qqPlot(log_data$log.data.Protein.copy.number.experiment..molecules.cell..,
main = 'Логарифм концентрации Protein', col = 'lightgray')
par(pr)
cor.test(log_data$log.data.mRNA.copy.number.experiment..molecules.cell..,
log_data$log.data.Protein.copy.number.experiment..molecules.cell..,
method = 'spearmen')
cor.test(log_data$log.data.mRNA.copy.number.experiment..molecules.cell..,
log_data$log.data.Protein.copy.number.experiment..molecules.cell..,
method = 'spearman')
plot(x = log_data$log.data.mRNA.copy.number.experiment..molecules.cell..,
y = log_data$log.data.Protein.copy.number.experiment..molecules.cell..)
#р меньше 0,05, значит, принимаем альтернативную гипотезу о том, что существует корреляция между данными
pr<- par(no.readonly=TRUE)
par(mfrow=c(1,2))
plot(x = log_data$log.data.mRNA.copy.number.experiment..molecules.cell..,
y = log_data$log.data.Protein.copy.number.experiment..molecules.cell..)
pr<- par(no.readonly=TRUE)
par(mfrow=c(1,2))
plot(x = log_data$log.data.mRNA.copy.number.experiment..molecules.cell..,
y = log_data$log.data.Protein.copy.number.experiment..molecules.cell..)
smoothScatter(x = log_data$log.data.mRNA.copy.number.experiment..molecules.cell..,
y = log_data$log.data.Protein.copy.number.experiment..molecules.cell..)
par(pr)
hep_data <- read.delim('Hepatotoxicity.txt')
fClass <- factor(hep_data$Class)
df <- data.frame(c(hep_data$Generic.name), fClass, fDose)
fDose <- factor(hep_data$Dose.category)
df <- data.frame(c(hep_data$Generic.name), fClass, fDose)
View(df)
df <- data.frame(c(hep_data$Generic.name), as.factor(fClass), as.factor(fDose))
View(df)
df <- data.frame(c(hep_data$Generic.name), Class = as.factor(fClass), Dose = as.factor(fDose))
View(df)
as.factor(fClass)
df <- data.frame(c(hep_data$Generic.name), Class = as.numeris(as.factor(fClass)), Dose = as.numeric(as.factor(fDose))
View(df)
View(df)
Dose = as.numeric(as.factor(fDose))
Dose = as.numeric(as.character(fDose))
View(df)
df <- data.frame(c(hep_data$Generic.name), Class = as.numeric(fClass),
Dose = as.numeric(fDose))
View(df)
qqplot(df$Class)
qqPlot(df$Class)
cor.test(df$Class,df$Dose,method="spearman")
View(hep_data)
library(WGCNA)
BiocManager::install("impute")
install.packages("WGCNA")
library(WGCNA)
BiocManager::install('preprocessCore')
install.packages("WGCNA")
library(WGCNA)
install.packages("WGCNA")
library(WGCNA)
# устанавливаем параметр, определяющий конвертацию символьных переменных в факторы
options(stringsAsFactors = FALSE)
# импортируем данные по транскрипции, оцениваем содержимое таблицы
femData <- read.csv("LiverFemale3600.csv")
# импортируем данные по транскрипции, оцениваем содержимое таблицы
femData <- read.csv('C:/Basova/Sys_bio/Co-expression/Mouse data/LiverFemale3600.csv')
setwd("C:/Basova/Sys_bio/Co-expression/Mouse data")
# импортируем данные по транскрипции, оцениваем содержимое таблицы
femData <- read.csv('LiverFemale3600.csv')
# удаляем ненужные столбцы, меняем названия строк и столбцов
datExpr0 <- as.data.frame(t(femData[, -c(1:8)]))
colnames(datExpr0) <- femData$substanceBXH
rownames(datExpr0) <- colnames(femData)[-c(1:8)]
View(femData)
View(datExpr0)
View(InsectSprays)
View(InsectSprays)
# поиск столбцов (генов) и строк (образцов) с большим количеством пропущенных значений
gsg <- goodSamplesGenes(datExpr0, verbose = 3)
gsg$allOK
if (!gsg$allOK)
if (!gsg$allOK)
{
# выводим в консоль названия удаляемых строк и столбцов:
if (sum(!gsg$goodGenes)>0)
printFlush(paste("Removing genes:", paste(names(datExpr0)[!gsg$goodGenes], collapse = ", ")))
if (sum(!gsg$goodSamples)>0)
printFlush(paste("Removing samples:", paste(rownames(datExpr0)[!gsg$goodSamples], collapse = ", ")))
# удаляем соответствующие строки и столбцы из таблицы:
datExpr0 <- datExpr0[gsg$goodSamples, gsg$goodGenes]
}
# выполняем кластерный анализ для образцов
sampleTree <- hclust(dist(datExpr0), method = "average")
sizeGrWindow(12,9)
par(cex = 0.6)
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2)
# устанавливаем порог для поиска кластеров
abline(h = 15, col = "red")
# выделяем кластеры с выбранным порогом h = 15
clust <- cutreeStatic(sampleTree, cutHeight = 15, minSize = 10)
table(clust)
datExpr <- datExpr0[clust==1, ]
# импортируем данные по характеристикам образцов
traitData <- read.csv("ClinicalTraits.csv")
dim(traitData)
names(traitData)
# удаляем ненужные столбцы
traitData <- traitData[, -c(31, 16)]
traitData <- traitData[, c(2, 11:36)]
dim(traitData)
names(traitData)
# соотносим строки в таблицах с характеристиками образцов и данными по транскрипции генов
traitRows <- match(rownames(datExpr), traitData$Mice)
datTraits <- traitData[traitRows, -1]
rownames(datTraits) <- traitData[traitRows, 1]
collectGarbage()
# сохраняем обе таблицы
save(datExpr, datTraits, file = "FemaleLiver-1-dataInput.RData")
# подключаем пакет WGCNA
library(WGCNA)
# устанавливаем параметр, определ¤ющий конвертацию символьных переменных в факторы
options(stringsAsFactors = FALSE)
# импортируем ранее сохраненные таблицы с характеристиками образцов и данными по транскрипции генов
lnames <- load(file = "FemaleLiver-1-dataInput.RData")
lnames
# подбираем степень beta дл¤ функции смежности
powers <- c(c(1:10), seq(from = 12, to=20, by=2))
sft <- pickSoftThreshold(datExpr, powerVector = powers, networkType="signed",verbose = 5)
# устанавливаем параметры дл¤ графиков
sizeGrWindow(9, 5)
par(mfrow = c(1,2))
cex1 <- 0.7
# поиск наименьшего значени¤ beta, при котором коэффициент детерминации R^2 соответствующей линейной модели превосходит 0.8
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="p",pch=20,ylim=c(-0.1,0.9),xlim=c(-1,20),
main = paste("Scale independence"))
text(sft$fitIndices[,1], (-sign(sft$fitIndices[,3])*sft$fitIndices[,2])+0.05,
labels=powers,cex=cex1,col="red")
# горизонтальна¤ лини¤ соответствующа¤ порогу R^2 = 0.8
abline(h=0.80,col="blue")
# средн¤¤ св¤зность как функци¤ от степени beta
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="p",pch=20,
main = paste("Mean connectivity"))
# находим матрицу смежности графа
softPower <- 14
adjacency <- adjacency(datExpr, power = softPower,type = "signed")
# вычисл¤ем топологическое сходства и рассто¤ние дл¤ вершин графа (генов)
TOM <- TOMsimilarity(adjacency,TOMType = "signed")
dissTOM <- 1-TOM
# выполн¤ем иерархическую кластеризацию генов, использу¤ матрицу топологических рассто¤ний
geneTree <- hclust(as.dist(dissTOM), method = "average")
sizeGrWindow(12,9)
plot(geneTree, xlab="", sub="", main = "Gene clustering on TOM-based dissimilarity",
labels = FALSE, hang = 0.04)
# ищем кластеры (модули) генов в построенном дереве с минимальным размером кластеров - 30 генов
minModuleSize <- 30
dynamicMods <- cutreeDynamic(dendro = geneTree, distM = dissTOM,
deepSplit = 2, pamRespectsDendro = FALSE,
minClusterSize = minModuleSize)
table(dynamicMods)
# конвертируем номера кластеров в цвета
moduleColors <- labels2colors(dynamicMods)
table(moduleColors)
# вычисл¤ем "собственные гены" дл¤ модулей
MEList <- moduleEigengenes(datExpr, colors = moduleColors)
MEs <- MEList$eigengenes
# вычисл¤ем рассто¤ни¤ между ними (единица минус коэффициент коррел¤ции ѕирсона)
MEDiss <- 1-cor(MEs)
# выполн¤ем кластерный анализ дл¤ "собственных генов" модулей
METree <- hclust(as.dist(MEDiss), method = "average");
sizeGrWindow(7, 6)
plot(METree, main = "Clustering of module eigengenes",
xlab = "", sub = "")
View(METree)
View(MEDiss)
# присваиваем номер каждому модулю, исход¤ из его цвета
colorOrder <- c("grey", standardColors(50))
moduleLabels <- match(moduleColors, colorOrder)-1;
# сохран¤ем информацию о модул¤х и дендрограмме дл¤ генов
save(MEs, moduleLabels, moduleColors, geneTree, file = "FemaleLiver-2-networkConstruction.RData")
# подключаем пакет WGCNA
library(WGCNA)
# устанавливаем параметр, определ¤ющий конвертацию символьных переменных в факторы
options(stringsAsFactors = FALSE)
# импортируем ранее сохраненные таблицы с характеристиками образцов и данными по транскрипции генов
lnames <- load(file = "FemaleLiver-1-dataInput.RData")
lnames
# импортируем ранее сохраненные данные по модул¤м и дендрограмме генов
lnames <- load(file = "FemaleLiver-2-networkConstruction.RData")
lnames
# подключаем пакет WGCNA
library(WGCNA)
# устанавливаем параметр, определ¤ющий конвертацию символьных переменных в факторы
options(stringsAsFactors = FALSE)
# импортируем ранее сохраненные таблицы с характеристиками образцов и данными по транскрипции генов
lnames <- load(file = "FemaleLiver-1-dataInput.RData")
lnames
# импортируем ранее сохраненные данные по модул¤м и дендрограмме генов
lnames <- load(file = "FemaleLiver-2-networkConstruction.RData")
lnames
# находим количества генов и образцов
nGenes <- ncol(datExpr)
nSamples <- nrow(datExpr)
moduleTraitCor <- cor(MEs, datTraits, use = "p")
moduleTraitPvalue <- corPvalueStudent(moduleTraitCor, nSamples)
# строим график дл¤ визуализации св¤зей между модул¤ми и характеристиками образцов
sizeGrWindow(10,6)
textMatrix <- paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) <- dim(moduleTraitCor)
par(mar = c(7.5, 9.5, 3, 3))
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(datTraits),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.4,
zlim = c(-1,1),
main = paste("Module-trait relationships"))
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(datTraits),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.3,
zlim = c(-1,1),
main = paste("Module-trait relationships"))
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(datTraits),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.4,
zlim = c(-1,1),
main = paste("Module-trait relationships"))
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(datTraits),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1,1),
main = paste("Module-trait relationships"))
View(geneTree)
# создаем таблицу с информацией о весе мышей
weight <- as.data.frame(datTraits$weight_g)
names(weight) <- "weight"
# извлекаем названи¤ цвета из названий модулей
modNames <- substring(names(MEs), 3)
# вычисл¤ем принадлежность генов к модул¤м
geneModuleMembership <- as.data.frame(cor(datExpr, MEs, use = "p"))
MMPvalue <- as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples))
names(geneModuleMembership) <- paste("MM", modNames, sep="")
names(MMPvalue) <- paste("p.MM", modNames, sep="");
# вычисл¤ем коррел¤цию транскрипции всех генов и веса мышей
geneTraitSignificance <- as.data.frame(cor(datExpr, weight, use = "p"))
GSPvalue <- as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples))
names(geneTraitSignificance) <- paste("GS.", names(weight), sep="");
names(GSPvalue) <- paste("p.GS.", names(weight), sep="");
# импортируем данные по генам (название, хромосома и др)
annot <- read.csv(file = "GeneAnnotation.csv")
probes <- names(datExpr)
probes2annot <- match(probes, annot$substanceBXH)
sum(is.na(probes2annot))
# создаем начальный вариант таблицы с информацией о генах
geneInfo0 <- data.frame(substanceBXH = probes,
geneSymbol = annot$gene_symbol[probes2annot],
LocusLinkID = annot$LocusLinkID[probes2annot],
moduleColor = moduleColors,
geneTraitSignificance,
GSPvalue)
# сортируем модули по их св¤зи с весом
modOrder <- order(-abs(cor(MEs, weight, use = "p")))
# добавл¤ем информацию о принадлежности генов к модул¤м
for (mod in 1:ncol(geneModuleMembership)) {
oldNames = names(geneInfo0)
geneInfo0 = data.frame(geneInfo0, geneModuleMembership[, modOrder[mod]],
MMPvalue[, modOrder[mod]])
names(geneInfo0) = c(oldNames, paste("MM.", modNames[modOrder[mod]], sep=""),
paste("p.MM.", modNames[modOrder[mod]], sep=""))
}
# сортируем гены по их принадлежности к модул¤м и коррел¤ции с весом
geneOrder <- order(geneInfo0$moduleColor, -abs(geneInfo0$GS.weight))
geneInfo <- geneInfo0[geneOrder, ]
# сохран¤ем в файл полученную информацию по генам
write.table(geneInfo, file = "geneInfo.txt", sep="\t",quote=F, row.names=F)
